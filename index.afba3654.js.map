{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAAM,EAAQ,SAAS,aAAa,CAAC,eAE/B,EAAkB,SAAS,aAAa,CAAC,eACzC,EAAkB,SAAS,aAAa,CAAC,eACzC,EAAqB,SAAS,aAAa,CAAC,kBAC5C,EAAqB,SAAS,aAAa,CAAC,kBAuElD,EAAgB,gBAAgB,CAAC,QAlEjC,WACE,IAAM,EAAa,EAAM,gBAAgB,CAAC,MAE1C,CAAU,CAAC,EAAW,MAAM,CAAG,EAAE,CAAC,MAAM,GAEpC,EAAW,MAAM,CAAG,GAPR,GAQd,EAAgB,YAAY,CAAC,WAAY,IAGvC,EAAM,gBAAgB,CAAC,MAAM,MAAM,CAZvB,IAad,EAAgB,eAAe,CAAC,WAEpC,GAuDA,EAAgB,gBAAgB,CAAC,QArDjC,WAEE,IAAM,EAAU,AADA,EAAG,EAAM,gBAAgB,CAAC,MACpB,CAAC,EAAE,CAAC,SAAS,CAEnC,EAAM,kBAAkB,CAAC,YAAa,GAElC,EAAI,EAAM,gBAAgB,CAAC,OAAO,MAAM,EAtB5B,GAuBd,EAAgB,eAAe,CAAC,YAG9B,EAAI,EAAM,gBAAgB,CAAC,OAAO,MAAM,EA3B5B,IA4Bd,EAAgB,YAAY,CAAC,WAAY,GAE7C,GAyCA,EAAmB,gBAAgB,CAAC,QAvCpC,WACE,IAAM,EAAU,EAAG,EAAM,gBAAgB,CAAC,OAKpC,EAAa,AAFS,EAAG,CAAM,CAAC,EAAE,CAAC,QAAQ,CAEZ,CAAC,EAAE,CAAC,SAAS,CAElD,EAAO,OAAO,CAAC,SAAC,CAAhB,EACE,EAAK,kBAAkB,CAAC,YAAa,EACvC,GAEI,EAAM,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,CA3CnC,GA4Cd,EAAmB,eAAe,CAAC,YAGjC,EAAM,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,EAhDnC,IAiDd,EAAmB,YAAY,CAAC,WAAY,GAEhD,GAqBA,EAAmB,gBAAgB,CAAC,QAnBpC,WAGE,AAFgB,EAAG,EAAM,gBAAgB,CAAC,OAEnC,OAAO,CAAC,SAAC,CAAA,CAAM,CAAtB,EACE,EAAK,gBAAgB,CAAC,MAAM,EAC9B,GAEI,EAAM,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,EA3DnC,GA4Dd,EAAmB,YAAY,CAAC,WAAY,IAG1C,EAAM,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,CAhEnC,IAiEd,EAAmB,eAAe,CAAC,WAEvC","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar table = document.querySelector(\"table tbody\");\nvar buttonAppendRow = document.querySelector(\".append-row\");\nvar buttonRemoveRow = document.querySelector(\".remove-row\");\nvar buttonAppendColumn = document.querySelector(\".append-column\");\nvar buttonRemoveColumn = document.querySelector(\".remove-column\");\nvar MAX_COUNT = 10;\nvar MIN_COUNT = 2;\nfunction removeRow() {\n    var elemTrList = table.querySelectorAll(\"tr\");\n    elemTrList[elemTrList.length - 1].remove();\n    if (elemTrList.length - 1 <= MIN_COUNT) buttonRemoveRow.setAttribute(\"disabled\", \"\");\n    if (table.querySelectorAll(\"tr\").length < MAX_COUNT) buttonAppendRow.removeAttribute(\"disabled\");\n}\nfunction appendRow() {\n    var trList = _to_consumable_array(table.querySelectorAll(\"tr\"));\n    var elemRow = trList[0].outerHTML;\n    table.insertAdjacentHTML(\"beforeend\", elemRow);\n    if (_to_consumable_array(table.querySelectorAll(\"tr\")).length >= MIN_COUNT) buttonRemoveRow.removeAttribute(\"disabled\");\n    if (_to_consumable_array(table.querySelectorAll(\"tr\")).length >= MAX_COUNT) buttonAppendRow.setAttribute(\"disabled\", \"\");\n}\nfunction appendColumn() {\n    var trList = _to_consumable_array(table.querySelectorAll(\"tr\"));\n    // get quantity elements\n    var quantityRowElement = _to_consumable_array(trList[0].children);\n    // get one HTML_element\n    var elemColumn = quantityRowElement[0].outerHTML;\n    trList.forEach(function(item) {\n        item.insertAdjacentHTML(\"beforeend\", elemColumn);\n    });\n    if (table.querySelectorAll(\"tr\")[0].children.length > MIN_COUNT) buttonRemoveColumn.removeAttribute(\"disabled\");\n    if (table.querySelectorAll(\"tr\")[0].children.length >= MAX_COUNT) buttonAppendColumn.setAttribute(\"disabled\", \"\");\n}\nfunction removeColumn() {\n    var trList = _to_consumable_array(table.querySelectorAll(\"tr\"));\n    trList.forEach(function(item, i) {\n        item.lastElementChild.remove();\n    });\n    if (table.querySelectorAll(\"tr\")[0].children.length <= MIN_COUNT) buttonRemoveColumn.setAttribute(\"disabled\", \"\");\n    if (table.querySelectorAll(\"tr\")[0].children.length < MAX_COUNT) buttonAppendColumn.removeAttribute(\"disabled\");\n}\nbuttonRemoveRow.addEventListener(\"click\", removeRow);\nbuttonAppendRow.addEventListener(\"click\", appendRow);\nbuttonAppendColumn.addEventListener(\"click\", appendColumn);\nbuttonRemoveColumn.addEventListener(\"click\", removeColumn);\n\n//# sourceMappingURL=index.afba3654.js.map\n","'use strict';\n\nconst table = document.querySelector('table tbody');\n\nconst buttonAppendRow = document.querySelector('.append-row');\nconst buttonRemoveRow = document.querySelector('.remove-row');\nconst buttonAppendColumn = document.querySelector('.append-column');\nconst buttonRemoveColumn = document.querySelector('.remove-column');\n\nconst MAX_COUNT = 10;\nconst MIN_COUNT = 2;\n\nfunction removeRow() {\n  const elemTrList = table.querySelectorAll('tr');\n\n  elemTrList[elemTrList.length - 1].remove();\n\n  if (elemTrList.length - 1 <= MIN_COUNT) {\n    buttonRemoveRow.setAttribute('disabled', '');\n  }\n\n  if (table.querySelectorAll('tr').length < MAX_COUNT) {\n    buttonAppendRow.removeAttribute('disabled');\n  }\n}\n\nfunction appendRow() {\n  const trList = [...table.querySelectorAll('tr')];\n  const elemRow = trList[0].outerHTML;\n\n  table.insertAdjacentHTML('beforeend', elemRow);\n\n  if ([...table.querySelectorAll('tr')].length >= MIN_COUNT) {\n    buttonRemoveRow.removeAttribute('disabled');\n  }\n\n  if ([...table.querySelectorAll('tr')].length >= MAX_COUNT) {\n    buttonAppendRow.setAttribute('disabled', '');\n  }\n}\n\nfunction appendColumn() {\n  const trList = [...table.querySelectorAll('tr')];\n\n  // get quantity elements\n  const quantityRowElement = [...trList[0].children];\n  // get one HTML_element\n  const elemColumn = quantityRowElement[0].outerHTML;\n\n  trList.forEach((item) => {\n    item.insertAdjacentHTML('beforeend', elemColumn);\n  });\n\n  if (table.querySelectorAll('tr')[0].children.length > MIN_COUNT) {\n    buttonRemoveColumn.removeAttribute('disabled');\n  }\n\n  if (table.querySelectorAll('tr')[0].children.length >= MAX_COUNT) {\n    buttonAppendColumn.setAttribute('disabled', '');\n  }\n}\n\nfunction removeColumn() {\n  const trList = [...table.querySelectorAll('tr')];\n\n  trList.forEach((item, i) => {\n    item.lastElementChild.remove();\n  });\n\n  if (table.querySelectorAll('tr')[0].children.length <= MIN_COUNT) {\n    buttonRemoveColumn.setAttribute('disabled', '');\n  }\n\n  if (table.querySelectorAll('tr')[0].children.length < MAX_COUNT) {\n    buttonAppendColumn.removeAttribute('disabled');\n  }\n}\n\nbuttonRemoveRow.addEventListener('click', removeRow);\nbuttonAppendRow.addEventListener('click', appendRow);\nbuttonAppendColumn.addEventListener('click', appendColumn);\nbuttonRemoveColumn.addEventListener('click', removeColumn);\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","table","document","querySelector","buttonAppendRow","buttonRemoveRow","buttonAppendColumn","buttonRemoveColumn","addEventListener","elemTrList","querySelectorAll","remove","setAttribute","removeAttribute","elemRow","trList","outerHTML","insertAdjacentHTML","elemColumn","quantityRowElement","children","forEach","item","lastElementChild"],"version":3,"file":"index.afba3654.js.map"}